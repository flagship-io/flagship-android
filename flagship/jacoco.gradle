apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.7"
    version = '0.8.7'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

project.afterEvaluate {

    android.libraryVariants.all { variant ->
        def variantBase = variant.name[0..5]
        def variantName = variant.name
        def testTaskName = "test${variantName.capitalize()}UnitTest"

        tasks.create(name: "${testTaskName}Coverage", type: JacocoReport, dependsOn: "$testTaskName") {
            group = "Reporting"
            description = "Generate Jacoco coverage reports on the ${variantName.capitalize()} build."

            reports {
                html.enabled = true
                xml.enabled = false
                csv.enabled = true
            }

            def excludes = [
                    '**/R.class',
                    '**/R$*.class',
                    '**/BuildConfig.*',
                    '**/Manifest*.*',
                    '**/*Test*.*',
                    'android/**/*.*',
            ]

            def javaClasses = fileTree(dir: variant.javaCompiler.destinationDir, excludes: excludes)
                    .filter({ file ->
                        !file.name.contains('_Impl') &&
                                !file.name.contains('Creator') &&
                                !file.name.contains('MIGRATION') &&
                                !file.name.contains('DefaultImpls')
                    })
            def kotlinClasses = fileTree(dir: "${buildDir}/tmp/kotlin-classes/${variantName}", excludes: excludes)
                    .filter({ file ->
                        !file.name.contains('_Impl') &&
                                !file.name.contains('Creator') &&
                                !file.name.contains('MIGRATION') &&
                                !file.name.contains('DefaultImpls')
                    })

            classDirectories.from = files([javaClasses], [kotlinClasses])

            sourceDirectories.from = files([
                    "$project.projectDir/src/main/java",
                    "$project.projectDir/src/$variantBase/java",
            ])

            executionData.from = files([
                    "${project.buildDir}/jacoco/${testTaskName}.exec"
            ])
        }
    }
}


task testAllVariantsWithCoverage {
    doLast {
        exec {
            workingDir rootProject.projectDir
            commandLine 'sh', "./gradlew", ":flagship:clean"
        }
        exec {
            workingDir rootProject.projectDir
            commandLine 'sh', "./gradlew", ":flagship:testCommonDebugUnitTestCoverage"
        }
        exec {
            workingDir rootProject.projectDir
            commandLine 'sh', "./gradlew", ":flagship:testCompatDebugUnitTestCoverage"
        }
    }
}